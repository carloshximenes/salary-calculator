{"version":3,"sources":["components/InputText/InputText.js","containers/App.js","serviceWorker.js","index.js"],"names":["Radium","props","style","borderBottom","borderColor","editable","fontWeight","width","undefined","fontSize","textAlign","marginRight","marginLeft","outline","readOnly","value","onChange","changed","type","listaIRRF","salMin","tax","deducao","listaINSS","useState","salarioBruto","setSalarioBruto","dependentes","setDependentes","valorINSS","setValorINSS","valorIRRF","setValorIRRF","outrosDescontos","setOutrosDescontos","salarioLiquido","setSalarioLiquido","useEffect","tetoSalarioBruto","baseINSS","find","base","calculoINSS","toFixed","novoSalarioBruto","baseIRRF","calculoIRRF","className","display","justifyContent","alignItems","letterSpacing","lineHeight","fontFamily","event","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a996b99.chunk.js","sourcesContent":["import React from 'react';\r\nimport Radium from 'radium';\r\n\r\nfunction InputText(props) {\r\n    const style = {\r\n        borderBottom: '2px dotted',\r\n        borderColor: (props.editable === 'readonly') ? 'tomato' : '#66bb6a',\r\n        fontWeight: '300',\r\n        width: (props.width === undefined) ? '120px' : props.width,\r\n        fontSize: '1.4rem',\r\n        textAlign: 'right',\r\n        marginRight: '0.2em',\r\n        marginLeft: '0.2em',\r\n        ':focus': { outline: 'none' }\r\n    };\r\n\r\n    return (<><input readOnly={props.editable} value={props.value} onChange={props.changed} style={style} type='number' /></>);\r\n}\r\n\r\nexport default Radium(InputText);","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport InputText from '../components/InputText/InputText';\r\nimport Radium from 'radium';\r\n\r\nconst listaIRRF = [\r\n  { salMin: 4664.69, tax: 0.2750, deducao: 869.36 },\r\n  { salMin: 3751.06, tax: 0.2250, deducao: 636.13 },\r\n  { salMin: 2826.66, tax: 0.1500, deducao: 354.80 },\r\n  { salMin: 1903.99, tax: 0.0750, deducao: 142.80 },\r\n  { salMin: 0, tax: 0, deducao: 0 }\r\n];\r\n\r\nconst listaINSS = [\r\n  { salMin: 2919.73, tax: 0.11 },\r\n  { salMin: 1751.82, tax: 0.09 },\r\n  { salMin: 0, tax: 0.08 },\r\n];\r\n\r\nfunction App() {\r\n  const [salarioBruto, setSalarioBruto] = useState(0);\r\n  const [dependentes, setDependentes] = useState(0);\r\n  const [valorINSS, setValorINSS] = useState({ value: 0, tax: 0 });\r\n  const [valorIRRF, setValorIRRF] = useState({ value: 0, tax: 0 });\r\n  const [outrosDescontos, setOutrosDescontos] = useState(0);\r\n  const [salarioLiquido, setSalarioLiquido] = useState(0);\r\n\r\n  const style = {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    fontWeight: '300',\r\n    fontSize: '1.4rem',\r\n    letterSpacing: '1px',\r\n    lineHeight: '2',\r\n    textAlign: 'justify',\r\n    fontFamily: 'ProximaNova, Saira Semi Condensed, sans-serif'\r\n  };\r\n\r\n  useEffect(() => {\r\n    let tetoSalarioBruto = (salarioBruto > 5839.45) ? 5839.45 : salarioBruto;\r\n    let baseINSS = listaINSS.find(base => base.salMin <= tetoSalarioBruto) || 0;\r\n    let calculoINSS = (tetoSalarioBruto * baseINSS.tax);\r\n    setValorINSS({ value: calculoINSS.toFixed(2), tax: baseINSS.tax.toFixed(2) * 100 });\r\n\r\n    let valorDependentes = dependentes * 189.59;\r\n    let novoSalarioBruto = salarioBruto - calculoINSS - valorDependentes;\r\n\r\n\r\n    let baseIRRF = listaIRRF.find(base => base.salMin <= novoSalarioBruto) || 0;\r\n    let calculoIRRF = (novoSalarioBruto * baseIRRF.tax) - baseIRRF.deducao;\r\n    setValorIRRF({ value: calculoIRRF.toFixed(2), tax: (baseIRRF.tax * 100).toFixed(2) });\r\n\r\n    let salarioLiquidoFinal = salarioBruto - calculoINSS - calculoIRRF - outrosDescontos;\r\n    setSalarioLiquido((salarioLiquidoFinal).toFixed(2));\r\n\r\n  }, [salarioBruto, dependentes, outrosDescontos]);\r\n\r\n  return (\r\n    <div className=\"App\" style={style}>\r\n      <p>Se o seu salário bruto for de R$\r\n        <InputText value={salarioBruto} changed={(event) => setSalarioBruto(event.target.value)} />\r\n        e você possuir\r\n        <InputText width='50px' value={dependentes} changed={(event) => setDependentes(event.target.value)} />\r\n        dependente(s), será descontado um valor de R$\r\n        <InputText editable='readonly' value={valorINSS.value} />\r\n        (<InputText width='40px' editable='readonly' value={valorINSS.tax} />%)\r\n        referente ao INSS e R$\r\n        <InputText editable='readonly' value={valorIRRF.value} />\r\n        (<InputText width='70px' editable='readonly' value={valorIRRF.tax} />%)\r\n        referente ao IRRF. Considerando que você possui outros descontos (plano de saúde, pensão alimentícia, etc) no valor de R$\r\n        <InputText value={outrosDescontos} changed={(event) => setOutrosDescontos(event.target.value)} />, seu salário líquido é de R$\r\n        <InputText editable='readonly' value={salarioLiquido} />\r\n        .</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Radium(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}